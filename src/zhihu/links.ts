export function tryCoveringAutoGeneratedKeywordLink(
  element: HTMLElement
): element is AutoGeneratedKeywordAnchor {
  if (isAutoGeneratedKeywordAnchor(element)) {
    coverAutoGeneratedKeywordLink(element)
    return true
  } else {
    return false
  }
}
export function coverAutoGeneratedKeywordLink(element: AutoGeneratedKeywordAnchor) {
  const keywordText = document.createTextNode(element.textContent)
  element.after(keywordText)
  element.style.display = "none"
  /**
   * Can't replace(delete) children(`a` included), which will cause React(zhihu) to throw errors
   * So simply hide it visually
   * @deprecated
   */
  // container.replaceChildren(anchor.textContent as string)
}
function isAutoGeneratedKeywordAnchor(element: HTMLElement): element is AutoGeneratedKeywordAnchor {
  return (
    element instanceof HTMLAnchorElement &&
    element.parentElement instanceof HTMLElement &&
    element.href.startsWith("https://www.zhihu.com/search?q=")
  )
}
interface AutoGeneratedKeywordAnchor extends HTMLAnchorElement {
  parentElement: HTMLElement
  href: `/https://www.zhihu.com/search?q=/${string}`
  textContent: string
}

export function trySubstitutingRedirectionLink(container: HTMLElement) {
  const selected = container.querySelector(
    "a[href^='http://link.zhihu.com/?target='], a[href^='https://link.zhihu.com/?target=']"
  )
  if (selected instanceof HTMLAnchorElement) {
    selected.href = removeRedirection(selected.href)
    return true
  } else {
    return false
  }
}
function removeRedirection(url: string) {
  const validRedirectionLinkPrefix = new RegExp("^https?://link.zhihu.com/\\?target=")
  const urlRemovingRedirection = url.replace(validRedirectionLinkPrefix, "")
  return decodeURIComponent(urlRemovingRedirection)
}
